"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chalk_1 = require("chalk");
const string_1 = require("@ionic/cli-framework/utils/string");
const errors_1 = require("../lib/errors");
const serve_1 = require("../lib/serve");
function serve(env, inputs, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        yield env.hooks.fire('watch:before', { env });
        let [platform] = inputs;
        const address = options['address'] ? String(options['address']) : serve_1.BIND_ALL_ADDRESS;
        const port = string_1.str2num(options['port'], serve_1.DEFAULT_SERVER_PORT);
        const livereloadPort = string_1.str2num(options['livereload-port'], serve_1.DEFAULT_LIVERELOAD_PORT);
        const notificationPort = string_1.str2num(options['dev-logger-port'], serve_1.DEFAULT_DEV_LOGGER_PORT);
        const serveOptions = {
            address,
            port,
            livereloadPort,
            notificationPort,
            consolelogs: options['consolelogs'] ? true : false,
            serverlogs: options['serverlogs'] ? true : false,
            livereload: typeof options['livereload'] === 'boolean' ? Boolean(options['livereload']) : true,
            proxy: typeof options['proxy'] === 'boolean' ? Boolean(options['proxy']) : true,
            lab: options['lab'] ? true : false,
            open: options['open'] ? true : false,
            browser: options['browser'] ? String(options['browser']) : undefined,
            browserOption: options['browseroption'] ? String(options['browseroption']) : undefined,
            basicAuth: options['auth'] ? ['ionic', String(options['auth'])] : undefined,
            env: options['env'] ? String(options['env']) : undefined,
            devapp: typeof options['devapp'] === 'undefined' || options['devapp'] ? true : false,
            externalAddressRequired: options['externalAddressRequired'] ? true : false,
            iscordovaserve: typeof options['iscordovaserve'] === 'boolean' ? Boolean(options['iscordovaserve']) : false,
        };
        let serverDetails;
        const project = yield env.project.load();
        if (project.type === 'ionic1') {
            const { serve } = yield Promise.resolve().then(function () { return require('../lib/ionic1/serve'); });
            serverDetails = yield serve({ env, options: serveOptions });
        }
        else if (project.type === 'ionic-angular') {
            const { serve } = yield Promise.resolve().then(function () { return require('../lib/ionic-angular/serve'); });
            serverDetails = yield serve({ env, options: Object.assign({ platform, target: serveOptions.iscordovaserve ? 'cordova' : undefined }, serveOptions) });
        }
        else {
            throw new errors_1.FatalException(`Cannot perform Ionic serve/watch for project type: ${chalk_1.default.bold(project.type)}.\n` +
                (project.type === 'custom' ? `Since you're using the ${chalk_1.default.bold('custom')} project type, this command won't work. The Ionic CLI doesn't know how to serve custom projects.\n\n` : '') +
                `If you'd like the CLI to try to detect your project type, you can unset the ${chalk_1.default.bold('type')} attribute in ${chalk_1.default.bold('ionic.config.json')}.\n`);
        }
        const devAppActive = !serveOptions.iscordovaserve && serveOptions.devapp;
        const devAppServiceName = `${project.name}@${port}`;
        if (devAppActive) {
            const { Publisher } = yield Promise.resolve().then(function () { return require('@ionic/discover'); });
            const service = new Publisher('devapp', devAppServiceName, serveOptions.port);
            service.path = '/?devapp=true';
            service.on('error', (err) => {
                // env.log.error(`Error in DevApp service: ${String(err.stack ? err.stack : err)}`);
            });
            try {
                yield service.start();
            }
            catch (e) {
                // env.log.error(`Could not publish DevApp service: ${String(e.stack ? e.stack : e)}`);
            }
        }
        const localAddress = `http://localhost:${serverDetails.port}`;
        const fmtExternalAddress = (address) => `http://${address}:${serverDetails.port}`;
        env.log.ok(`Development server running!\n` +
            `Local: ${chalk_1.default.bold(localAddress)}\n` +
            (serverDetails.externalAddresses.length > 0 ? `External: ${serverDetails.externalAddresses.map(v => chalk_1.default.bold(fmtExternalAddress(v))).join(', ')}\n` : '') +
            (serveOptions.basicAuth ? `Basic Auth: ${chalk_1.default.bold(serveOptions.basicAuth[0])} / ${chalk_1.default.bold(serveOptions.basicAuth[1])}` : '')
        // (devAppActive ? `DevApp Channel: ${chalk.bold(devAppServiceName)}` : '')
        );
        if (project.type !== 'ionic-angular') {
            if (serveOptions.open) {
                const openOptions = [localAddress]
                    .concat(serveOptions.lab ? [serve_1.IONIC_LAB_URL] : [])
                    .concat(serveOptions.browserOption ? [serveOptions.browserOption] : [])
                    .concat(platform ? ['?ionicplatform=', platform] : []);
                const opn = yield Promise.resolve().then(function () { return require('opn'); });
                opn(openOptions.join(''), { app: serveOptions.browser, wait: false });
            }
        }
        return serverDetails;
    });
}
exports.serve = serve;
