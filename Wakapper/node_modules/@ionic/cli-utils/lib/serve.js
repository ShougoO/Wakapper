"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chalk_1 = require("chalk");
const errors_1 = require("./errors");
exports.DEFAULT_DEV_LOGGER_PORT = 53703;
exports.DEFAULT_LIVERELOAD_PORT = 35729;
exports.DEFAULT_SERVER_PORT = 8100;
exports.IONIC_LAB_URL = '/ionic-lab';
exports.BIND_ALL_ADDRESS = '0.0.0.0';
exports.LOCAL_ADDRESSES = ['localhost', '127.0.0.1'];
exports.BROWSERS = ['safari', 'firefox', process.platform === 'win32' ? 'chrome' : (process.platform === 'darwin' ? 'google chrome' : 'google-chrome')];
function selectExternalIP(env, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { getSuitableNetworkInterfaces } = yield Promise.resolve().then(function () { return require('./utils/network'); });
        let availableIPs = [];
        let chosenIP = options.address;
        if (options.address === exports.BIND_ALL_ADDRESS) {
            availableIPs = getSuitableNetworkInterfaces().map(ip => ip.address);
            if (availableIPs.length === 0) {
                if (options.externalAddressRequired) {
                    throw new errors_1.FatalException(`No external network interfaces detected. In order to use livereload with run/emulate you will need one.\n` +
                        `Are you connected to a local network?\n`);
                }
            }
            else if (availableIPs.length === 1) {
                chosenIP = availableIPs[0];
            }
            else if (availableIPs.length > 1) {
                if (options.externalAddressRequired) {
                    env.log.warn('Multiple network interfaces detected!\n' +
                        'You will be prompted to select an external-facing IP for the livereload server that your device or emulator has access to.\n' +
                        `You may also use the ${chalk_1.default.green('--address')} option to skip this prompt.\n`);
                    const promptedIp = yield env.prompt({
                        type: 'list',
                        name: 'promptedIp',
                        message: 'Please select which IP to use:',
                        choices: availableIPs,
                    });
                    chosenIP = promptedIp;
                }
            }
        }
        return [chosenIP, availableIPs];
    });
}
exports.selectExternalIP = selectExternalIP;
